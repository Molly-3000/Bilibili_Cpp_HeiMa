#include"head.h"

/*
* ****内存分区
* https://blog.csdn.net/MQ0522/article/details/114823770
*   --------
*  |        |
*  |  栈区  |   ↓增长
*  |        |
*  |-―-----|
*  |        |
*  |  堆区  |	↑增长
*  |        |
*  |-―-----|
*  |        |
*  | 全局区 |
*  |        |
*  |-―-----|
*  | 常量区 |
*  |-―-----|
*  | 代码区 |
*   -―-----
* 
*/

/*
* ***** 全局区 static （静态区、数据区、全局静态区、静态全局区
* 
* 存放：全局变量、（全局及局部）静态变量、虚函数表
*		
		（一份类里面只有唯一的虚函数表，很像静态成员一份类里面只有一份，不同对象共用一份。所以在全局区。
* 
* 特点：1、在程序（编译后）运行前，就可以确定存储大小
*		2、在程序运行时，可读可写
*		3、在程序执行完后，由 OS 回收
*							  ^^
* 细分：1、.bss段
*			・存放未初始化的全局/静态变量
*			・存放初始化为0的全局/静态变量
*			・不占用可执行(exe)文件的空间，内容由OS初始化
* 
*		2、.data段
*			・存放已初始化的全局/静态变量
*			・占用可执行(exe)文件的空间，内容由程序初始化
* 
* 
* ****** 常量区
*
* 存放：1、字符串、数字等常量
*		2、const修饰的全局变量，即全局常量
*		3、函数指针（函数指针本身就是const pointer）
*					   ^^
* 特点：在程序运行时，只读
* 
*/


//全局变量 存放在全局区
int g_a = 10;
int g_b = 10;

//全局常量 存放在常量区
const int c_g_a = 10;
const int c_g_b = 10;

int main01() {
	
	// 全局区
	// 存放： 全局变量 全局常量 静态变量

	// 普通局部变量 存放在栈区
	int l_a = 10;
	int l_b = 10;

	cout << "局部变量l_a的地址为：" << &l_a << endl;
	cout << "局部变量l_b的地址为：" << &l_b << endl;

	cout << "全局变量g_a的地址为：" << &g_a << endl;
	cout << "全局变量g_b的地址为：" << &g_b << endl;

	// 静态局部变量 存放在全局区
	static int s_a = 10;
	static int s_b = 10;

	cout << "静态变量s_a的地址为：" << &s_a << endl;
	cout << "静态变量s_b的地址为：" << &s_b << endl;

	// 常量区
	// 1、字符串常量，双引号引起来的都是字符串常量
	// 2、数字常量
	// 3、const修饰的全局变量，即全局常量

	cout << "字符串常量a的地址为：" << &"a" << endl;


	cout << "全局常量c_g_a的地址为：" << &c_g_a << endl;
	cout << "全局常量c_g_b的地址为：" << &c_g_b << endl;

	// 局部常量 存放在栈区
	const int c_l_a = 10;
	const int c_l_b = 10;
	cout << "局部常量c_l_a的地址为：" << &c_l_a << endl;
	cout << "局部常量c_l_b的地址为：" << &c_l_b << endl;

	system("pause");
	return 0;

}