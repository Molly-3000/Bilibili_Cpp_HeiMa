/*
* STL 初始
* 
* 1、STL的诞生
*	・希望建立一种可重复利用的东西
*	・C++的面向对象和泛型编程思想，目的就是为了提高复用性
*	・但数据结构和算法都未有统一标准，不同开发人员难以复用
*	・为了建立数据结构和算法的统一标准，诞生了STL
*			  ~~~~~~~~  ~~~~
* 
* 2、STL基本概念
*	・STL（Standard Template Library），标准模板库
*	・STL 从广义上分为：容器container，算法algorithm，迭代器iterator
*	・容器和算法之间，通过迭代器进行无缝链接
*	・STL 几乎所有的代码都采用了模板类或模板函数
* 
* 3、STL六大组件
*		容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器
*	・容器：各种数据结构，如vector\list\deque\set\map等，用于存放数据
*	・算法：各种常用算法，如sort\find\copy\for_each
*	・迭代器：容器与算法之间的胶合剂
*	・仿函数：行为类似函数，可作为算法的某种策略
*	・适配器：一种用来修饰容器、仿函数、迭代器接口的东西
*	・空间配置器：负责空间的配置与管理
* 
* 4、STL中容器、算法、迭代器
* 
*	//容器：STL容器就是将运用最广泛的一些数据结构实现出来
*							 ~~~~~	     ~~~~~~~~	
*	常用数据结构：数组、链表、树、栈、队列、集合、映射表
*	分为：序列式容器和关联式容器
*		  ~~~~~~~     ~~~~~~
*		・序列式容器：
		强调元素的序列，序列式容器中的每个元素有固定位置
			~~~~~~~~~~					  ~~~~  ~~~~~~~~
*		・关联式容器：
*		二叉树结构，各元素之间没有严格的物理上的顺序关系
*		~~~~~~~~~~
* 
*	//算法：用有限的步骤，解决逻辑或数学问题
*	分为：质变算法和非质变算法
*		  ~~~~~~~~  ~~~~~~~~~~
*		・质变算法：
*		运算过程中会更改区间内的元素的内容。如拷贝，替换，删除
*					~~~~~~~~				  ~~~~
*		・非质变算法：
*		运算过程中不更改区间内的元素内容。如查找、计数、遍历、寻找MAXMIN等
*				  ~~~~~~~~~		~~~~~~~~
*	
*	//迭代器：提供一种，能够依序访问容器内各个元素，而又无需暴露容器内部表示方式，的方法。
*					即容器和算法之间的粘合剂，算法通过迭代器访问容器。
*						每个容器都有专属的迭代器。
* 
*	分为五类：
*		・输入迭代器：对容器内数据的只写访问			支持++
*		・输出迭代器：对数据的只读访问					支持++、==、!=
*		・向前迭代器：读写，并能向前推进迭代器			支持++、==、!=
*		・双向迭代器：读写，并能向前和向后操作			支持++、--
*		・随机访问迭代器：读写，可以跳跃访问任意数据，功能最强的迭代器		
														支持++、--、[n]、-n、
															<、<=、>、>=
*																		
*/